"""This module deals with the version string. The version string is held
into an INI file (so that InnoSetup can read it).

At build timen, the version is computed and written to INI, as well as read
by InnoSetup.

At runtime, the version is read from INI file.

This module can also be executed (used by Inno Setup) as standalone program;
in this case it prints the version string to stdout.
"""

import os.path
import ConfigParser
import subprocess
import re

# Please list all subdirs over which the revision sum has to be computes
DIRS = [None, "plugins", "code"]

# Version. The revision sum is the 3rd number
VERSION = "1.00.%s"
VERSION_INI_PATH = "autogenerated_version.ini"


def getVersionFromIni():
    """Read INI file to get version that was set at build time"""
    config = ConfigParser.RawConfigParser()
    config.read(VERSION_INI_PATH)
    try:
        return config.get('version', 'version')
    except:
        return "<unknown version>"


def setVersionToIni(directory):
    """For built time: write version to INI file"""
    version_str = getVersionFromScm()
    config = ConfigParser.RawConfigParser()
    config.add_section('version')
    config.set('version', 'version', version_str)
    path = os.path.join(directory, VERSION_INI_PATH)
    if not os.path.exists(path):
        configfile = open(path, "w")
        config.write(configfile)
        configfile.close()


def getVersionFromScm():
    """For build time: build version str"""
    rev_str = get_scm_rev()
    if rev_str is None:
        rev_str = "unknown-revision"
    return VERSION % rev_str


def get_scm_rev():
    """For build time: compute revision from SCM info"""
    output = subprocess.check_output(["svnversion", "-n"])
    rx = re.compile("[^0-9a-z_]+", re.I)
    return rx.sub("_", output)


def getVersion():
    return getVersionFromIni()
